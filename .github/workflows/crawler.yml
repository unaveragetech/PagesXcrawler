#🅿🅰🅶🅴🆂🆇🅲🆁🅰🆆🅻🅴🆁 __action_workflow__
# This is the GitHub Actions workflow configuration file.
# It defines the process that runs whenever an issue is opened.
# The workflow includes steps for checking out the code, setting up Python,
# installing dependencies, running the crawler, committing results,
# updating the HTML page to reflect the latest data,
# logging the issue status, and closing the issue.
# It also counts deployments and actions after completing the main tasks.
#🅿🅰🅶🅴🆂🆇🅲🆁🅰🆆🅻🅴🆁 __action_workflow__
name: Web Crawler

on:
  issues:
    types: [opened]

jobs:
  crawl:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # Step 3: Install dependencies required for crawling and HTML updates
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      # Step 4: Extract URL and Depth from issue title
      - name: Extract URL and Depth
        id: extract
        run: |
          issue_title="${{ github.event.issue.title }}"
          issue_number="${{ github.event.issue.number }}"

          # Regex to capture any URL followed by ":depth(number)"
          if [[ "$issue_title" =~ ^((https?://)?[a-zA-Z0-9.-]+(:[0-9]+)?(/[a-zA-Z0-9._/-]*)?):depth\(([0-9]+)\)$ ]]; then
              echo "URL=${BASH_REMATCH[1]}" >> $GITHUB_ENV
              echo "DEPTH=${BASH_REMATCH[5]}" >> $GITHUB_ENV
              echo "ISSUE_TITLE=${issue_title}" >> $GITHUB_ENV
              echo "ISSUE_NUMBER=${issue_number}" >> $GITHUB_ENV

              # Debugging output to verify BASH_REMATCH contents
              echo "BASH_REMATCH content for debugging:"
              for i in "${!BASH_REMATCH[@]}"; do
                  echo "$i: ${BASH_REMATCH[$i]}"
              done
          else
              echo "Error: Issue title must be in the format 'url:depth(number)'"
              exit 1
          fi

      # Step 5: Run the crawler script with extracted URL and Depth
      - name: Run crawler
        run: |
          echo "Running crawler with URL: $URL and Depth: $DEPTH"
          python crawler.py "$URL" "$DEPTH"

      # Step 6: Update HTML page with new data
      - name: Update HTML page
        run: |
          python scripts/update_html.py

      # Step 7: Log issue completion status in CSV file
      - name: Log issue status
        run: |
          CSV_FILE="data/issues_status.csv"

          # Create CSV if it doesn't exist, and add header
          if [ ! -f "$CSV_FILE" ]; then
              echo "Issue Number,Issue Title,Status" > "$CSV_FILE"
          fi

          # Append current issue details with status 'Completed'
          echo "${{ env.ISSUE_NUMBER }},${{ env.ISSUE_TITLE }},Completed" >> "$CSV_FILE"

      # Step 8: Close the issue programmatically using GitHub API
      - name: Close the issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          echo "Closing issue #$ISSUE_NUMBER"
          curl -X PATCH \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER \
            -d '{"state": "closed"}'

      # Step 9: Commit results to the repository
      - name: Commit results
        env:
          MY_PAT: ${{ secrets.MY_PAT }}  # Use Personal Access Token for auth
        run: |
          git config --local user.name "github-actions"
          git config --local user.email "github-actions@github.com"
          git add data/results.json data/results.csv data/issues_status.csv index.html
          git commit -m "Update results and log issues" || echo "No changes to commit"
          git push https://x-access-token:${MY_PAT}@github.com/${{ github.repository }} HEAD:main

      # Step 10: Count deployments and actions, update JSON files
      - name: Count Deployments and Actions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create 'data' directory if it doesn't exist
          mkdir -p data

          # Count deployments using GitHub API
          deployments_count=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/unaveragetech/PagesXcrawler/deployments" | jq 'length')
          echo '{"schemaVersion": 1, "label": "Deployments", "message": "'"$deployments_count"'", "color": "blue"}' > data/deployments.json

          # Count all, successful, and failed workflow runs
          actions_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/unaveragetech/PagesXcrawler/actions/runs")
          
          actions_count=$(echo "$actions_response" | jq '.total_count')
          successful_actions_count=$(echo "$actions_response" | jq '[.workflow_runs[] | select(.conclusion == "success")] | length')
          failed_actions_count=$(echo "$actions_response" | jq '[.workflow_runs[] | select(.conclusion == "failure")] | length')

          # Output JSON files with counter details
          echo '{"schemaVersion": 1, "label": "Actions", "message": "'"$actions_count"'", "color": "green"}' > data/actions.json
          echo '{"schemaVersion": 1, "label": "Successful Actions", "message": "'"$successful_actions_count"'", "color": "brightgreen"}' > data/successful_actions.json
          echo '{"schemaVersion": 1, "label": "Failed Actions", "message": "'"$failed_actions_count"'", "color": "red"}' > data/failed_actions.json

          # Commit counters to the repository
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
          git add data/deployments.json data/actions.json data/successful_actions.json data/failed_actions.json
          git commit -m "Update counters for deployments and actions" || echo "No changes to commit"
          git push https://x-access-token:${MY_PAT}@github.com/${{ github.repository }} HEAD:main

      # Step 11: Debug Personal Access Token (PAT)
      - name: Debug PAT
        run: |
          echo "Debugging: My PAT is set."
